from abc import ABC, abstractmethod
from utils.Context import Context

class SingleAdd:#when add a line, push the current line to the next line
    def __init__ (self, line: int, content: str):
        self.line = line
        self.content = content
class SingleRemove:
    def __init__ (self, line: int):
        self.line = line
class SingleUpdate:
    def __init__ (self, line: int, content: str):
        self.line = line
        self.content = content
class FileUpdate:
    def __init__(self, file_path: str = None):
        self.file_path = file_path
        self.remove = [SingleRemove]
        self.add = [SingleAdd]
        self.update = [SingleUpdate]
class Response:
    def __init__(self, content: str, FileUpdate: FileUpdate = None):
        self.content = content
        self.update = FileUpdate

class IAgent(ABC):
    @abstractmethod
    def filter_context(self, context: Context) -> Context:
        """
        Filter the context to only include relevant information for the agent.
        
        :param context: The context to filter.
        :return: A filtered context containing only relevant information.
        """
        pass

    @abstractmethod
    def process(self, prompt: str, context: Context) -> str:
        """
        Process the given prompt and return a response.
        
        :param prompt: The input prompt to process.
        :param context: The context in which the agent operates.
        :return: The response generated by the agent.
        """
        pass

    # Located in: FileHandling/src/agents/IAgent.py
    from abc import ABC, abstractmethod

    class IAgent(ABC):
        """Interface for all AI agents, ensuring a consistent entry point."""

        @abstractmethod
        async def process(self, data: dict) -> dict:
            """The main method to process a user request."""
            pass


